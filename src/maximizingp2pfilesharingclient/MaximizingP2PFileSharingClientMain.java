/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

package maximizingp2pfilesharingclient;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.PrintWriter;
import java.net.Socket;
import java.util.ArrayList;
import java.util.Hashtable;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.SwingUtilities;
import maximizingp2pfilesharingclient.client.ClientCallback;
import maximizingp2pfilesharingclient.client.ClientThread;
import maximizingp2pfilesharingserver.algorithms.PCS_Algorithms;
import maximizingp2pfilesharingserver.server.ServerCallback;
import maximizingp2pfilesharingserver.server.ServerThread;

/**
 *
 * @author Master PC
 */
public class MaximizingP2PFileSharingClientMain extends javax.swing.JFrame {

    /**
     * Creates new form MaximizingP2PFileSharingClientMain
     */
    public MaximizingP2PFileSharingClientMain() {
        initComponents();
        
        ConsoleRedirect redirect = new ConsoleRedirect(this.jTextAreaConsole, System.out);
        System.setOut(redirect);
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        desktopPane = new javax.swing.JDesktopPane();
        jInternalFrameConsole = new javax.swing.JInternalFrame();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaConsole = new javax.swing.JTextArea();
        jLabelNodeName = new javax.swing.JLabel();
        menuBar = new javax.swing.JMenuBar();
        fileMenu = new javax.swing.JMenu();
        jMenuItemStartClient = new javax.swing.JMenuItem();
        jMenuItemConnectToClient = new javax.swing.JMenuItem();
        jMenuItemRequestReplicate = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        desktopPane.setBackground(new java.awt.Color(0, 102, 255));
        desktopPane.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jInternalFrameConsole.setClosable(true);
        jInternalFrameConsole.setDefaultCloseOperation(javax.swing.WindowConstants.HIDE_ON_CLOSE);
        jInternalFrameConsole.setIconifiable(true);
        jInternalFrameConsole.setMaximizable(true);
        jInternalFrameConsole.setResizable(true);
        jInternalFrameConsole.setTitle("Client Console...");
        jInternalFrameConsole.setVisible(true);

        jTextAreaConsole.setBackground(new java.awt.Color(51, 153, 0));
        jTextAreaConsole.setColumns(20);
        jTextAreaConsole.setFont(new java.awt.Font("Monospaced", 1, 13)); // NOI18N
        jTextAreaConsole.setForeground(new java.awt.Color(255, 255, 255));
        jTextAreaConsole.setRows(5);
        jTextAreaConsole.setText("[Console]\n>>");
        jTextAreaConsole.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED), javax.swing.BorderFactory.createEtchedBorder()));
        jScrollPane1.setViewportView(jTextAreaConsole);

        jInternalFrameConsole.getContentPane().add(jScrollPane1, java.awt.BorderLayout.CENTER);

        desktopPane.add(jInternalFrameConsole);
        jInternalFrameConsole.setBounds(340, 180, 460, 200);

        jLabelNodeName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabelNodeName.setForeground(new java.awt.Color(255, 0, 0));
        jLabelNodeName.setText("Node Name : Node Not Started!");
        desktopPane.add(jLabelNodeName);
        jLabelNodeName.setBounds(0, 0, 400, 90);

        menuBar.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        fileMenu.setMnemonic('f');
        fileMenu.setText("File Sharing Client");

        jMenuItemStartClient.setText("Start Client....");
        jMenuItemStartClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemStartClientActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemStartClient);

        jMenuItemConnectToClient.setText("Connect To Client...");
        jMenuItemConnectToClient.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemConnectToClientActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemConnectToClient);

        jMenuItemRequestReplicate.setText("Request Replicate...");
        jMenuItemRequestReplicate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemRequestReplicateActionPerformed(evt);
            }
        });
        fileMenu.add(jMenuItemRequestReplicate);

        exitMenuItem.setMnemonic('x');
        exitMenuItem.setText("Exit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        setJMenuBar(menuBar);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 872, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(desktopPane, javax.swing.GroupLayout.DEFAULT_SIZE, 553, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private Hashtable<String,ClientThread> clientThreads = new Hashtable<String, ClientThread>();
    private ServerThread serverThread;
    
    private List<String> filesList = null;
    private List<String> nodesList = null;
    
    private String clientId = "";
    
    private List<String> pathreplies = new ArrayList<String>();
    
    private void jMenuItemStartClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemStartClientActionPerformed

        
        final String port = JOptionPane.showInputDialog(this,"Enter Clients Listening Port:");
        final String clientId = JOptionPane.showInputDialog(this, "Enter Client ID:");
        
//        String port = "";
        
//        port = "900"+clientId.substring(clientId.length()-1);
        
        Globals.clientListeningPort = port;
        
        Globals.p2pFileSharesPath = "c:\\p2pfileshares\\"+clientId;
        
        if(!new File(Globals.p2pFileSharesPath).exists())
            new File(Globals.p2pFileSharesPath).mkdir();
        
        this.clientId = clientId;
        
        this.serverThread = new ServerThread();
        
        this.serverThread.setCallback(new ServerCallback() {

            @Override
            public void updateConnect(String ipAddress,String clientId1, String clientPort) {
                
                
                     long count = clientThreads.values().stream().filter(clientthread -> {
                         if(clientthread.getClientClientID().equals(clientId1)) {
                             return true;
                         } else
                             return false;
                     }).count();
                
                     if(count!=0)
                         return;
                
                    final ClientThread clientThread = new ClientThread(clientId,clientId1,ipAddress,clientPort);
                    
                    clientThreads.put(clientThread.getClientClientID(), clientThread);

                    clientThread.setCallback(new ClientCallback() {

                    @Override
                    public void updateGetFile(String node, String file, String path) {

                        final String[] paths = path.split(";");

                        try {
                            Object[] filesOneLost = PCS_Algorithms.PCS_Algorithm(serverThread,file, node, "");

                            List<File> filesOne = (List<File>) filesOneLost[0];
                            List<File> filesLost = (List<File>) filesOneLost[1];


                            for(File file1 : filesOne) {
                                if(filesLost.contains(file1)) {
                                    filesLost.remove(file1);
                                }
                            }

                            for(File file1 : filesLost) {
                                if(filesOne.contains(file1)) {
                                    filesOne.remove(file1);
                                }
                            }


                            for(File fileOne : filesOne) {
                                if(!new File(Globals.p2pFileSharesPath+"\\won_drive").exists())
                                    new File(Globals.p2pFileSharesPath+"\\won_drive").mkdir();

                                System.out.println("Resource Allocation : Won File : "+fileOne.getName());                                            

                                FileInputStream fileIn = new FileInputStream(fileOne);
                                byte[] filecontent = new byte[fileIn.available()];

                                fileIn.read(filecontent);
                                fileIn.close();
                                
                                fileOne.delete();

                                FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileOne.getName()));
                                fileOut.write(filecontent);
                                fileOut.flush();
                                fileOut.close();
                            }

                            for(File fileLost : filesLost) {
                                if(!new File(Globals.p2pFileSharesPath+"\\lost_drive").exists())
                                    new File(Globals.p2pFileSharesPath+"\\lost_drive").mkdir();

                                System.out.println("Resource Allocation : Lost File : "+fileLost.getName());                                            

                                FileInputStream fileIn = new FileInputStream(fileLost);
                                byte[] filecontent = new byte[fileIn.available()];

                                fileIn.read(filecontent);
                                fileIn.close();
                                
                                fileLost.delete();

                                FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileLost.getName()));
                                fileOut.write(filecontent);
                                fileOut.flush();
                                fileOut.close();
                            }

                        } catch(Exception e) {

                        }


                        if(node.equals(clientId)) {

                            String lastClient = "";

                            if(paths.length>1) {
                                lastClient = paths[paths.length-2];
                            } else {
                                lastClient = paths[paths.length-1];
                            }

                            final String lastClient1 = lastClient;

                            serverThread.getClients().forEach((clientid,client)-> {
                                if(clientid.equals(lastClient1)) {
                                    try {
                                        PrintWriter pw = new PrintWriter(client.getOutputStream());

                                        String filePath = "";

                                        if(new File(Globals.p2pFileSharesPath+"\\"+file).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\"+file).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+file).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+file).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+file).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+file).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+file).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+file).getAbsolutePath();
                                        }

                                        FileInputStream fileIn = new FileInputStream(filePath);
                                        byte[] fileContent = new byte[fileIn.available()];

                                        fileIn.read(fileContent);
                                        fileIn.close();

                                        String hex = HexDecoder.encode(fileContent);

                                        pw.println("[file]:"+file+","+paths[0]+","+path);
                                        pw.flush();

                                        int div = hex.length()/1024;
                                        int divi = hex.length()%1024;

                                        int i=0;
                                        for(i=0;i<div;i++) {
                                            String hex2 = hex.substring(i*1024,i*1024+1024);

                                            pw.println(hex2);
                                            pw.flush();
                                        }

                                        if(divi!=0) {
                                            String hex2 = hex.substring(i*1024);

                                            pw.println(hex2);
                                            pw.flush();
                                        }

                                        pw.println("---end of file---");
                                        pw.flush();

                                    } catch (IOException ex) {
                                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                    }
                                }
                            });

                        } else if(!paths[0].equals(clientId)) {
                                boolean found = false;

                                String nextClient = "";

                                for(String path1 : paths) {
                                    if(found) {
                                        nextClient = path1;
                                        break;
                                    }
                                    if(path1.equals(clientId)) {
                                        found = true;
                                    }
                                }

                                final String lastClient1 = nextClient;

                                long count = clientThreads.values().stream().filter(clientthread -> {
                                   if(clientthread.getClientClientID().equals(lastClient1)) {
                                       return true;
                                   } else {
                                       return false;
                                   }
                                }).count();

                                if(count!=0) {
                                    clientThreads.forEach((clientid,clientThread) -> {
                                        try {
                                            if(clientThread.getClientClientID().equals(lastClient1)) {
                                                PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
                                                pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                                pw.flush();
                                            }
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    });
                                } else {
                                    serverThread.getClients().keySet().stream().filter(clientid-> {
                                       if(clientid.equals(lastClient1)) {
                                           return true;
                                       } else 
                                           return false;
                                    }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                        PrintWriter pw = null;
                                        try {
                                            Socket client = serverThread.getClients().get(clientid);
                                            pw = new PrintWriter(client.getOutputStream());

                                            pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                            pw.flush();
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        } finally {
                                            //pw.close();
                                        }
                                    });
                                }                                                

        //                        clientThreads.forEach((clientid,clientThread1)-> {
        //                            if(clientThread1.getClientClientID().equals(lastClient1)) {
        //                                try {
        //                                    
        //                                    
        //                                    PrintWriter pw = new PrintWriter(clientThread1.getClient().getOutputStream());
        //
        //                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
        //                                    pw.flush();
        //
        //
        //                                } catch (IOException ex) {
        //                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
        //                                }
        //                            }
        //
        //                        });
                        } else {
                                boolean found = false;

                                String nextClient = "";

                                for(String path1 : paths) {
                                    if(found) {
                                        nextClient = path1;
                                        break;
                                    }

                                    if(path1.equals(clientId)) {
                                        found = true;
                                    }
                                }

                                final String lastClient1 = nextClient;

                                long count = clientThreads.values().stream().filter(clientthread -> {
                                   if(clientthread.getClientClientID().equals(lastClient1)) {
                                       return true;
                                   } else {
                                       return false;
                                   }
                                }).count();

                                if(count!=0) {
                                    clientThreads.forEach((clientid,clientThread) -> {
                                        try {
                                            if(clientThread.getClientClientID().equals(lastClient1)) {
                                                PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
                                                pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                                pw.flush();
                                            }
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    });
                                } else {
                                    serverThread.getClients().keySet().stream().filter(clientid-> {
                                       if(clientid.equals(lastClient1)) {
                                           return true;
                                       } else 
                                           return false;
                                    }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                        PrintWriter pw = null;
                                        try {
                                            Socket client = serverThread.getClients().get(clientid);
                                            pw = new PrintWriter(client.getOutputStream());

                                            pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                            pw.flush();
                                } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        } finally {
                                            //pw.close();
                                        }
                                    });
                                }                        

        //                        clientThreads.forEach((clientid,clientThread)-> {
        //                            try {
        //                                if(clientThread.getClientClientID().equals(lastClient1)) {
        //                                    
        //                                    
        //                                    
        //                                    PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
        //                                
        //                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
        //                                    pw.flush();
        //                                    
        //                                    
        //                                }
        //                            } catch (IOException ex) {
        //                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
        //                            }
        //                            
        //                        });
                        }
                    }
                        
                        
                         @Override
                         public void updateRequest(String node, String path, String file) {
                            if(new File(Globals.p2pFileSharesPath+"\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\replicates\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\won_drive\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\lost_drive\\"+file).exists()) {
                                final String path1 = path+(clientId+";");

                                Globals.broadcastRequestCount = 0;
                                
                                serverThread.getClients().forEach((clientid,client) -> {
                                    String[] paths = path1.split(";");

                                    String lastClient = "";
                                    if(paths.length>1) {
                                        lastClient = paths[paths.length-2];
                                    } else
                                        lastClient = paths[paths.length-1];

                                    if(clientid.equals(lastClient)) {
                                        //Globals.broadcastRequestCount++;
                                        
                                        PrintWriter pw = null;
                                        try {
                                            pw = new PrintWriter(client.getOutputStream());
                                            //final String path2 = path+(clientId+";");
                                            pw.println("[broadcastreply]:"+node+","+file+","+path1);
                                            pw.flush();
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        } finally {
                                            //pw.close();
                                        }
                                    }
                                });

                            } else {

                                long count = clientThreads.values().stream().filter(clientthread -> {
                                   if(!path.contains(clientthread.getClientClientID())) {
                                       return true;
                                   } else {
                                       return false;
                                   }
                                }).count();

                                if(count!=0) {
                                    Globals.broadcastRequestCount = 0;
                                    
                                    clientThreads.forEach((clientid,clientThread) -> {
                                        try {
                                            if(!path.contains(clientThread.getClientClientID())) {
                                                Globals.broadcastRequestCount++;
                                                
                                                PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());

                                                final String path1 = path+(clientId+";");

                                                pw.println("[broadcastrequest]:"+node+","+file+","+path1);
                                                pw.flush();
                                            }
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        }
                                    });
                                } else {
                                    Globals.broadcastRequestCount = 0;
                                    
                                    serverThread.getClients().keySet().stream().filter(clientid-> {
                                       if(!path.contains(clientid)) {
                                           return true;
                                       } else 
                                           return false;
                                    }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                        PrintWriter pw = null;
                                        Globals.broadcastRequestCount++;
                                        try {
                                            Socket client = serverThread.getClients().get(clientid);
                                            pw = new PrintWriter(client.getOutputStream());
                                            final String path1 = path+(clientId+";");
                                            pw.println("[broadcastrequest]:"+node+","+file+","+path1);
                                            pw.flush();
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        } finally {
                                            //pw.close();
                                        }
                                    });
                                }
                            }
                             
                         }
                        
                        @Override
                        public void updateFile(String fileName, String node, String path, String hex) {


                            try {
                                Object[] filesOneLost = PCS_Algorithms.PCS_Algorithm(serverThread,fileName, node, "");

                                List<File> filesOne = (List<File>) filesOneLost[0];
                                List<File> filesLost = (List<File>) filesOneLost[1];


                                for(File file1 : filesOne) {
                                    if(filesLost.contains(file1)) {
                                        filesLost.remove(file1);
                                    }
                                }

                                for(File file1 : filesLost) {
                                    if(filesOne.contains(file1)) {
                                        filesOne.remove(file1);
                                    }
                                }


                                for(File fileOne : filesOne) {
                                    if(!new File(Globals.p2pFileSharesPath+"\\won_drive").exists())
                                        new File(Globals.p2pFileSharesPath+"\\won_drive").mkdir();

                                    System.out.println("Resource Allocation : Won File : "+fileOne.getName());                                            

                                    FileInputStream fileIn = new FileInputStream(fileOne);
                                    byte[] filecontent = new byte[fileIn.available()];

                                    fileIn.read(filecontent);
                                    fileIn.close();
                                    
                                    fileOne.delete();
                                    

                                    FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileOne.getName()));
                                    fileOut.write(filecontent);
                                    fileOut.flush();
                                    fileOut.close();
                                    
                                }

                                for(File fileLost : filesLost) {
                                    if(!new File(Globals.p2pFileSharesPath+"\\lost_drive").exists())
                                        new File(Globals.p2pFileSharesPath+"\\lost_drive").mkdir();

                                    System.out.println("Resource Allocation : Lost File : "+fileLost.getName());                                            

                                    FileInputStream fileIn = new FileInputStream(fileLost);
                                    byte[] filecontent = new byte[fileIn.available()];

                                    fileIn.read(filecontent);
                                    fileIn.close();
                                    
                                    fileLost.delete();

                                    FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileLost.getName()));
                                    fileOut.write(filecontent);
                                    fileOut.flush();
                                    fileOut.close();
                                }

                            } catch(Exception e) {

                            }
                            
                            final String hex1 = hex;
                            
                            final String[] paths = path.split(";");
                            
                            String prevClient = "";
                            
                            boolean found = false;
                            
                            for(String path1 : paths) {
                                if(path1.equals(clientId)) {
                                    found = true;
                                    break;
                                }
                                
                                prevClient = path1;
                            }
                            
                            if(prevClient.equals("")) {
                                found = false;
                                
                                for(String path1 : paths) {
                                    if(path1.equals(clientId)) {
                                        found = true;
                                    }

                                    if(found) {
                                        prevClient = path1;
                                        break;
                                    }
                                }
                            }
                            
                            final String lastClient = prevClient;
                            
                            long count = clientThreads.keySet().stream().filter(clientid -> {
                                if(clientid.equals(lastClient)) {
                                    return true;
                                } else
                                    return false;
                            }).count();
                            
                            if(count!=0) {
                                clientThreads.keySet().stream().filter(clientid-> {
                                    if(clientid.equals(lastClient)) {
                                        return true;
                                    } else
                                        return false;
                                }).forEach(clientid-> {
                                    clientThreads.values().stream()
                                            .filter(clientthread -> clientthread.getClientClientID().equals(clientid))
                                            .forEach(clientthread -> {
                                                     PrintWriter pw = null;
                                                     try {
                                                         pw = new PrintWriter(clientThread.getClient().getOutputStream());

                                                         String hex4 = hex1;

                                                         if(hex1==null) {
                                                                String filePath = "";

                                                                if(new File(Globals.p2pFileSharesPath+"\\"+fileName).exists()) {
                                                                    filePath = new File(Globals.p2pFileSharesPath+"\\"+fileName).getAbsolutePath();
                                                                } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).exists()) {
                                                                    filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).getAbsolutePath();
                                                                } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).exists()) {
                                                                    filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).getAbsolutePath();
                                                                } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).exists()) {
                                                                    filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).getAbsolutePath();
                                                                }

                                                                FileInputStream fileIn = new FileInputStream(filePath);
                                                                byte[] fileContent = new byte[fileIn.available()];

                                                                fileIn.read(fileContent);
                                                                fileIn.close();

                                                                hex4 = HexDecoder.encode(fileContent);
                                                         }

                                                         pw.println("[file]:"+fileName+","+node+","+path);
                                                         pw.flush();

                                                         int div = hex4.length() / 1024;
                                                         int divi = hex4.length() % 1024;

                                                         int i=0;
                                                         for(i=0;i<div;i++) {
                                                             String hex2 = hex4.substring(i*1024,i*1024+1024);

                                                             pw.println(hex2);
                                                             pw.flush();
                                                         }

                                                         if(divi!=0) {
                                                             String hex2 = hex4.substring(i*1024);

                                                             pw.println(hex2);
                                                             pw.flush();
                                                         }

                                                         pw.println("---end of file---");
                                                         pw.flush();

                                                     } catch (IOException ex) {
                                                         Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                                     } finally {
                                                         //pw.close();
                                                     }
                                            });
                                });
                            } else {
                                serverThread.getClients().forEach((clientid,client)-> {

                                    if(clientid.equals(lastClient)) {
                                         PrintWriter pw = null;
                                         try {
                                             pw = new PrintWriter(client.getOutputStream());

                                             String hex4 = hex1;

                                             if(hex1==null) {
                                                    String filePath = "";

                                                    if(new File(Globals.p2pFileSharesPath+"\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).getAbsolutePath();
                                                    }

                                                    FileInputStream fileIn = new FileInputStream(filePath);
                                                    byte[] fileContent = new byte[fileIn.available()];

                                                    fileIn.read(fileContent);
                                                    fileIn.close();

                                                    hex4 = HexDecoder.encode(fileContent);
                                             }

                                             pw.println("[file]:"+fileName+","+node+","+path);
                                             pw.flush();

                                             int div = hex4.length() / 1024;
                                             int divi = hex4.length() % 1024;

                                             int i=0;
                                             for(i=0;i<div;i++) {
                                                 String hex2 = hex4.substring(i*1024,i*1024+1024);

                                                 pw.println(hex2);
                                                 pw.flush();
                                             }

                                             if(divi!=0) {
                                                 String hex2 = hex4.substring(i*1024);

                                                 pw.println(hex2);
                                                 pw.flush();
                                             }

                                             pw.println("---end of file---");
                                             pw.flush();

                                         } catch (IOException ex) {
                                             Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                         } finally {
                                             //pw.close();
                                         }
                                    }

                                });
                            }
                        }

                        public void getFile(String node,String clientId, String path, String file) {

                            final String[] paths = path.split(";");

                            boolean found = false;

                            String nextClient = "";

                            for(String path1 : paths) {
                                if(found) {
                                    nextClient = path1;
                                    break;
                                }

                                if(path1.equals(clientId)) {
                                    found = true;
                                }
                            }

                            final String nextClient1 = nextClient;

                            clientThreads.forEach((clientid,clientThread1)-> {
                                if(clientThread1.getClientClientID().equals(nextClient1)) {
                                    PrintWriter pw = null;
                                    try {
                                        pw = new PrintWriter(clientThread1.getClient().getOutputStream());
                                        pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                        pw.flush();
                                    } catch (IOException ex) {
                                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                    } finally {
                                        //pw.close();
                                    }
                                } 
                            });
                        }

                        
                        private int minCount = 0;
                        private String selectedPath = "";
                                
                        @Override
                        public void updateReply(String node, String file, String path) {
                            
                            replyCount++;
                            
                            pathreplies.add(path);
                            
                            minCount = Integer.MAX_VALUE;
                            
                            if(pathreplies.size()==Globals.broadcastRequestCount) {
                                pathreplies.stream().forEach(path1->{
                                    String[] split = path1.split(";");
                                    
                                    if(split.length<minCount) {
                                        minCount = split.length;
                                        selectedPath = path1;
                                    }
                                });
                                

                                path = selectedPath;
                                
                                pathreplies.clear();
                            } else {
                                
                                return;
                            }
                            
                            String[] paths = path.split(";");
                            
                            final String path_selected = path;

                            if(paths[0].equals(clientId)) {
                                getFile(node,clientId,path,file);
                            } else {
                                String lastClient = paths[0];

                                for(String path1 : paths) {
                                    if(path1.equals(clientId)) {
                                        break;
                                    }
                                    lastClient = path1;
                                }

                                final String lastClient1 = lastClient;

                                serverThread.getClients().forEach((clientid,client)-> {
                                    if(clientid.equals(lastClient1)) {
                                        PrintWriter pw = null;
                                        try {
                                            pw = new PrintWriter(client.getOutputStream());
                                            //final String path2 = path+(clientId+";");
                                            pw.println("[broadcastreply]:"+node+","+file+","+path_selected);
                                            pw.flush();
                                        } catch (IOException ex) {
                                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                        } finally {
                                            //pw.close();
                                        }
                                    }
                                });
                            }
                        }

                        @Override
                        public void updateFile(String fileName, byte[] fileContent) {
                            try {
                                if(!new File(Globals.p2pFileSharesPath+"\\replicates").exists())
                                    new File(Globals.p2pFileSharesPath+"\\replicates").mkdir();
                                
                                FileOutputStream fileOut = new FileOutputStream(Globals.p2pFileSharesPath+"\\replicates\\"+fileName);

                                try {
                                    fileOut.write(fileContent);
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }

                                try {
                                    fileOut.flush();
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }

                                try {
                                    fileOut.close();
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }

                            } catch (FileNotFoundException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }

                        @Override
                        public void updateFiles(List<String> files) {
                            filesList = files;
                        }

                        @Override
                        public void updateNodes(List<String> files) {
                            nodesList = files;
                        }


                    });

                    clientThread.start();
            }
            
            @Override
            public void updateFile(String fileName, byte[] fileContent) {
                try {
                    if(!new File(Globals.p2pFileSharesPath+"\\replicates").exists())
                        new File(Globals.p2pFileSharesPath+"\\replicates").mkdir();
                    
                    FileOutputStream fileOut = new FileOutputStream(Globals.p2pFileSharesPath+"\\replicates\\"+fileName);
                    
                    try {
                        fileOut.write(fileContent);
                    } catch (IOException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        fileOut.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        fileOut.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void updateGetFile(String node, String file, String path) {
                
                final String[] paths = path.split(";");
                
                try {
                    Object[] filesOneLost = PCS_Algorithms.PCS_Algorithm(serverThread,file, node, "");

                    List<File> filesOne = (List<File>) filesOneLost[0];
                    List<File> filesLost = (List<File>) filesOneLost[1];


                    for(File file1 : filesOne) {
                        if(filesLost.contains(file1)) {
                            filesLost.remove(file1);
                        }
                    }

                    for(File file1 : filesLost) {
                        if(filesOne.contains(file1)) {
                            filesOne.remove(file1);
                        }
                    }


                    for(File fileOne : filesOne) {
                        if(!new File(Globals.p2pFileSharesPath+"\\won_drive").exists())
                            new File(Globals.p2pFileSharesPath+"\\won_drive").mkdir();

                        System.out.println("Resource Allocation : Won File : "+fileOne.getName());                                            

                        FileInputStream fileIn = new FileInputStream(fileOne);
                        byte[] filecontent = new byte[fileIn.available()];

                        fileIn.read(filecontent);
                        fileIn.close();
                        
                        fileOne.delete();

                        FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileOne.getName()));
                        fileOut.write(filecontent);
                        fileOut.flush();
                        fileOut.close();
                    }

                    for(File fileLost : filesLost) {
                        if(!new File(Globals.p2pFileSharesPath+"\\lost_drive").exists())
                            new File(Globals.p2pFileSharesPath+"\\lost_drive").mkdir();

                        System.out.println("Resource Allocation : Lost File : "+fileLost.getName());                                            

                        FileInputStream fileIn = new FileInputStream(fileLost);
                        byte[] filecontent = new byte[fileIn.available()];

                        fileIn.read(filecontent);
                        fileIn.close();
                        
                        fileLost.delete();

                        FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileLost.getName()));
                        fileOut.write(filecontent);
                        fileOut.flush();
                        fileOut.close();
                        
                    }

                } catch(Exception e) {

                }
                

                if(node.equals(clientId)) {
                    
                    String lastClient = "";
                    
                    if(paths.length>1) {
                        lastClient = paths[paths.length-2];
                    } else {
                        lastClient = paths[paths.length-1];
                    }
                    
                    final String lastClient1 = lastClient;
                    
                    serverThread.getClients().forEach((clientid,client)-> {
                        if(clientid.equals(lastClient1)) {
                            try {
                                PrintWriter pw = new PrintWriter(client.getOutputStream());
                                
                                String filePath = "";
                                
                                if(new File(Globals.p2pFileSharesPath+"\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\"+file).getAbsolutePath();
                                } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+file).getAbsolutePath();
                                } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+file).getAbsolutePath();
                                } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+file).getAbsolutePath();
                                }
                                    
                                 FileInputStream fileIn = new FileInputStream(filePath);
                                byte[] fileContent = new byte[fileIn.available()];
                                
                                fileIn.read(fileContent);
                                fileIn.close();
                                
                                String hex = HexDecoder.encode(fileContent);
                                
                                pw.println("[file]:"+file+","+paths[0]+","+path);
                                pw.flush();
                                
                                int div = hex.length()/1024;
                                int divi = hex.length()%1024;
                                
                                int i=0;
                                for(i=0;i<div;i++) {
                                    String hex2 = hex.substring(i*1024,i*1024+1024);
                                    
                                    pw.println(hex2);
                                    pw.flush();
                                }
                                
                                if(divi!=0) {
                                    String hex2 = hex.substring(i*1024);
                                    
                                    pw.println(hex2);
                                    pw.flush();
                                }
                                
                                pw.println("---end of file---");
                                pw.flush();
                                
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                    
                } else if(!paths[0].equals(clientId)) {
                        boolean found = false;

                        String nextClient = "";

                        for(String path1 : paths) {
                            if(found) {
                                nextClient = path1;
                                break;
                            }
                            if(path1.equals(clientId)) {
                                found = true;
                            }
                        }

                        final String lastClient1 = nextClient;
                        
                        long count = clientThreads.values().stream().filter(clientthread -> {
                           if(clientthread.getClientClientID().equals(lastClient1)) {
                               return true;
                           } else {
                               return false;
                           }
                        }).count();

                        if(count!=0) {
                            clientThreads.forEach((clientid,clientThread) -> {
                                try {
                                    if(clientThread.getClientClientID().equals(lastClient1)) {
                                        PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
                                        pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                        pw.flush();
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            });
                        } else {
                            serverThread.getClients().keySet().stream().filter(clientid-> {
                               if(clientid.equals(lastClient1)) {
                                   return true;
                               } else 
                                   return false;
                            }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                PrintWriter pw = null;
                                try {
                                    Socket client = serverThread.getClients().get(clientid);
                                    pw = new PrintWriter(client.getOutputStream());
                                    
                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                    pw.flush();
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    //pw.close();
                                }
                            });
                        }                                                

//                        clientThreads.forEach((clientid,clientThread1)-> {
//                            if(clientThread1.getClientClientID().equals(lastClient1)) {
//                                try {
//                                    
//                                    
//                                    PrintWriter pw = new PrintWriter(clientThread1.getClient().getOutputStream());
//
//                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
//                                    pw.flush();
//
//
//                                } catch (IOException ex) {
//                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
//                                }
//                            }
//
//                        });
                } else {
                        boolean found = false;

                        String nextClient = "";

                        for(String path1 : paths) {
                            if(found) {
                                nextClient = path1;
                                break;
                            }
                            
                            if(path1.equals(clientId)) {
                                found = true;
                            }
                        }

                        final String lastClient1 = nextClient;
                        
                        long count = clientThreads.values().stream().filter(clientthread -> {
                           if(clientthread.getClientClientID().equals(lastClient1)) {
                               return true;
                           } else {
                               return false;
                           }
                        }).count();

                        if(count!=0) {
                            clientThreads.forEach((clientid,clientThread) -> {
                                try {
                                    if(clientThread.getClientClientID().equals(lastClient1)) {
                                        PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
                                        pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                        pw.flush();
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            });
                        } else {
                            serverThread.getClients().keySet().stream().filter(clientid-> {
                               if(clientid.equals(lastClient1)) {
                                   return true;
                               } else 
                                   return false;
                            }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                PrintWriter pw = null;
                                try {
                                    Socket client = serverThread.getClients().get(clientid);
                                    pw = new PrintWriter(client.getOutputStream());
                                    
                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                    pw.flush();
                        } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    //pw.close();
                                }
                            });
                        }                        
                        
//                        clientThreads.forEach((clientid,clientThread)-> {
//                            try {
//                                if(clientThread.getClientClientID().equals(lastClient1)) {
//                                    
//                                    
//                                    
//                                    PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
//                                
//                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
//                                    pw.flush();
//                                    
//                                    
//                                }
//                            } catch (IOException ex) {
//                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            
//                        });
                }
            }
            
            @Override
            public void updateFile(String fileName, String node, String path, byte[] fileContent) {

                final String hex = HexDecoder.encode(fileContent);
                
                try {
                    Object[] filesOneLost = PCS_Algorithms.PCS_Algorithm(serverThread,fileName, node, "");

                    List<File> filesOne = (List<File>) filesOneLost[0];
                    List<File> filesLost = (List<File>) filesOneLost[1];


                    for(File file1 : filesOne) {
                        if(filesLost.contains(file1)) {
                            filesLost.remove(file1);
                        }
                    }

                    for(File file1 : filesLost) {
                        if(filesOne.contains(file1)) {
                            filesOne.remove(file1);
                        }
                    }


                    for(File fileOne : filesOne) {
                        if(!new File(Globals.p2pFileSharesPath+"\\won_drive").exists())
                            new File(Globals.p2pFileSharesPath+"\\won_drive").mkdir();

                        System.out.println("Resource Allocation : Won File : "+fileOne.getName());                                            

                        FileInputStream fileIn = new FileInputStream(fileOne);
                        byte[] filecontent = new byte[fileIn.available()];

                        fileIn.read(filecontent);
                        fileIn.close();
                        
                        fileOne.delete();

                        FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileOne.getName()));
                        fileOut.write(filecontent);
                        fileOut.flush();
                        fileOut.close();
                    }

                    for(File fileLost : filesLost) {
                        if(!new File(Globals.p2pFileSharesPath+"\\lost_drive").exists())
                            new File(Globals.p2pFileSharesPath+"\\lost_drive").mkdir();

                        System.out.println("Resource Allocation : Lost File : "+fileLost.getName());                                            

                        FileInputStream fileIn = new FileInputStream(fileLost);
                        byte[] filecontent = new byte[fileIn.available()];

                        fileIn.read(filecontent);
                        fileIn.close();
                        
                        fileLost.delete();

                        FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileLost.getName()));
                        fileOut.write(filecontent);
                        fileOut.flush();
                        fileOut.close();
                    }

                } catch(Exception e) {

                }

                final String hex1 = hex;

                final String[] paths = path.split(";");

                String prevClient = "";

                boolean found = false;
                
                if(node.equals(clientId)) {
                    try {
                        if(!new File(Globals.p2pFileSharesPath+"\\replicates").exists())
                            new File(Globals.p2pFileSharesPath+"\\replicates").mkdir();

                        FileOutputStream fileOut = new FileOutputStream(Globals.p2pFileSharesPath+"\\replicates\\"+fileName);

                        try {
                            fileOut.write(fileContent);
                        } catch (IOException ex) {
                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            fileOut.flush();
                        } catch (IOException ex) {
                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                        }

                        try {
                            fileOut.close();
                        } catch (IOException ex) {
                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                        }

                    } catch (FileNotFoundException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }                    
                    
                    return;
                }

                for(String path1 : paths) {
                    if(path1.equals(clientId)) {
                        found = true;
                        break;
                    }

                    prevClient = path1;
                }

                if(prevClient.equals("")) {
                    found = false;

                    for(String path1 : paths) {
                        if(path1.equals(clientId)) {
                            found = true;
                        }

                        if(found) {
                            prevClient = path1;
                            break;
                        }
                    }
                }

                final String lastClient = prevClient;

                long count = clientThreads.keySet().stream().filter(clientid -> {
                    if(clientid.equals(lastClient)) {
                        return true;
                    } else
                        return false;
                }).count();

                if(count!=0) {
                    clientThreads.keySet().stream().filter(clientid-> {
                        if(clientid.equals(lastClient)) {
                            return true;
                        } else
                            return false;
                    }).forEach(clientid-> {
                        clientThreads.values().stream()
                                .filter(clientthread -> clientthread.getClientClientID().equals(clientid))
                                .forEach(clientthread -> {
                                         PrintWriter pw = null;
                                         try {
                                             pw = new PrintWriter(clientthread.getClient().getOutputStream());

                                             String hex4 = hex1;

                                             if(hex1==null) {
                                                    String filePath = "";

                                                    if(new File(Globals.p2pFileSharesPath+"\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).getAbsolutePath();
                                                    }

                                                    FileInputStream fileIn = new FileInputStream(filePath);
                                                    byte[] fileContent2 = new byte[fileIn.available()];

                                                    fileIn.read(fileContent2);
                                                    fileIn.close();

                                                    hex4 = HexDecoder.encode(fileContent2);
                                             }

                                             pw.println("[file]:"+fileName+","+node+","+path);
                                             pw.flush();

                                             int div = hex4.length() / 1024;
                                             int divi = hex4.length() % 1024;

                                             int i=0;
                                             for(i=0;i<div;i++) {
                                                 String hex2 = hex4.substring(i*1024,i*1024+1024);

                                                 pw.println(hex2);
                                                 pw.flush();
                                             }

                                             if(divi!=0) {
                                                 String hex2 = hex4.substring(i*1024);

                                                 pw.println(hex2);
                                                 pw.flush();
                                             }

                                             pw.println("---end of file---");
                                             pw.flush();

                                         } catch (IOException ex) {
                                             Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                         } finally {
                                             //pw.close();
                                         }
                                });
                    });
                } else {
                    serverThread.getClients().forEach((clientid,client)-> {

                        if(clientid.equals(lastClient)) {
                             PrintWriter pw = null;
                             try {
                                 pw = new PrintWriter(client.getOutputStream());

                                 String hex4 = hex1;

                                 if(hex1==null) {
                                        String filePath = "";

                                        if(new File(Globals.p2pFileSharesPath+"\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\"+fileName).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).getAbsolutePath();
                                        }

                                        FileInputStream fileIn = new FileInputStream(filePath);
                                        byte[] fileContent2 = new byte[fileIn.available()];

                                        fileIn.read(fileContent2);
                                        fileIn.close();

                                        hex4 = HexDecoder.encode(fileContent2);
                                 }

                                 pw.println("[file]:"+fileName+","+node+","+path);
                                 pw.flush();

                                 int div = hex4.length() / 1024;
                                 int divi = hex4.length() % 1024;

                                 int i=0;
                                 for(i=0;i<div;i++) {
                                     String hex2 = hex4.substring(i*1024,i*1024+1024);

                                     pw.println(hex2);
                                     pw.flush();
                                 }

                                 if(divi!=0) {
                                     String hex2 = hex4.substring(i*1024);

                                     pw.println(hex2);
                                     pw.flush();
                                 }

                                 pw.println("---end of file---");
                                 pw.flush();

                             } catch (IOException ex) {
                                 Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                             } finally {
                                 //pw.close();
                             }
                        }

                    });
                }
            }            


            @Override
            public void updateReply(String node,String path, String file) {
                String[] paths = path.split(";");
                
                if(paths.length>1) {
                    final String toNode = paths[paths.length-2];
                    
                    clientThreads.forEach((ipaddress,clientthread) -> {
                        if(clientthread.getClientId().equals(toNode)) {
                            clientthread.broadcastReply(node, path, file);
                        }
                    });
                }
            }

            @Override
            public void updateRequest(String node,String path, String file) {
                if(new File(Globals.p2pFileSharesPath+"\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\replicates\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\won_drive\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\lost_drive\\"+file).exists()) {
                    final String path1 = path+(clientId+";");
                    
                    Globals.broadcastRequestCount = 0;
                    
                    serverThread.getClients().forEach((clientid,client) -> {
                        String[] paths = path1.split(";");
                        
                        String lastClient = "";
                        if(paths.length>1) {
                            lastClient = paths[paths.length-2];
                        } else
                            lastClient = paths[paths.length-1];
                        
                        
                        
                        if(clientid.equals(lastClient)) {
                            Globals.broadcastRequestCount++;
                            
                            PrintWriter pw = null;
                            try {
                                pw = new PrintWriter(client.getOutputStream());
                                //final String path2 = path+(clientId+";");
                                pw.println("[broadcastreply]:"+node+","+file+","+path1);
                                pw.flush();
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                //pw.close();
                            }
                        }
                    });
                    
                } else {
                    
                    Globals.broadcastRequestCount = 0;
                    
                    long count = clientThreads.values().stream().filter(clientthread -> {
                       if(!path.contains(clientthread.getClientClientID())) {
                           return true;
                       } else {
                           return false;
                       }
                    }).count();
                    
                    if(count!=0) {
                        clientThreads.forEach((clientid,clientThread) -> {
                            try {
                                if(!path.contains(clientThread.getClientClientID())) {
                                    Globals.broadcastRequestCount++;
                                    
                                    PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());

                                    final String path1 = path+(clientId+";");

                                    pw.println("[broadcastrequest]:"+node+","+file+","+path1);
                                    pw.flush();
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    } else {
                        Globals.broadcastRequestCount = 0;
                        
                        serverThread.getClients().keySet().stream().filter(clientid-> {
                           if(!path.contains(clientid)) {
                               return true;
                           } else 
                               return false;
                        }).collect(Collectors.toList()).stream().forEach(clientid -> {
                            PrintWriter pw = null;
                            try {
                                Globals.broadcastRequestCount++;
                                Socket client = serverThread.getClients().get(clientid);
                                pw = new PrintWriter(client.getOutputStream());
                                final String path1 = path+(clientId+";");
                                pw.println("[broadcastrequest]:"+node+","+file+","+path1);
                                pw.flush();
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                //pw.close();
                            }
                        });
                    }
                }
            }
            
            
        });
        
        this.serverThread.start(Integer.parseInt(port));
        
        this.jMenuItemStartClient.setEnabled(false);
        
        this.jLabelNodeName.setText("Node : " + this.clientId + " Started! ");
        
    }//GEN-LAST:event_jMenuItemStartClientActionPerformed

    int index = 0;
    
    private int replyCount = 0;
    
    private void jMenuItemRequestReplicateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemRequestReplicateActionPerformed
    
        
        ReplicateFileDialog dialog = new ReplicateFileDialog(this, true);
        dialog.setVisible(true);
        
        String selectedFile = dialog.getSelectedFile();
        
        Globals.broadcastRequestCount = this.clientThreads.size();
        
        replyCount=0;
        
        this.clientThreads.forEach((ip,clientThread)-> {
            clientThread.broadcastRequest(selectedFile,"",serverThread);
        });
        
        
        Thread fileExistsThread = new Thread(new Runnable() {

            @Override
            public void run() {
                try {
                    Thread.sleep(5000);
                    
                    if(replyCount==0) {
                        SwingUtilities.invokeLater(new Runnable() {

                            @Override
                            public void run() {
                                JOptionPane.showMessageDialog(null, "File Doesnt Exist!");
                            }
                        });
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        });
        
        fileExistsThread.start();
        
        
        
        
    }//GEN-LAST:event_jMenuItemRequestReplicateActionPerformed

    private void jMenuItemConnectToClientActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemConnectToClientActionPerformed
        
        
        final String clientClientId = JOptionPane.showInputDialog(this, "Enter Client's ID:");
        final String ipAddress = JOptionPane.showInputDialog(this, "Enter Client IP Address:");
        final String port = JOptionPane.showInputDialog(this, "Enter Client Port:");
        
//        final String ipAddress = "localhost";
//        String port = "";
        
//        port = "900"+clientClientId.substring(clientClientId.length()-1);
//        
//        if(clientClientId.equals("c1")) {
//            port = "9001";
//        } else if(clientClientId.equals("c2")) {
//            port = "9002";
//        } else if(clientClientId.equals("c3")) {
//            port = "9003";
//        } else if(clientClientId.equals("c4")) {
//            port = "9004";
//        } else if(clientClientId.equals("c5")) {
//            port = "9005";
//        }

        final ClientThread clientThread = new ClientThread(this.clientId,clientClientId,ipAddress,port);
        
        clientThread.setCallback(new ClientCallback() {

            @Override
            public void updateGetFile(String node, String file, String path) {
                
                final String[] paths = path.split(";");
                
                try {
                    Object[] filesOneLost = PCS_Algorithms.PCS_Algorithm(serverThread,file, node, "");

                    List<File> filesOne = (List<File>) filesOneLost[0];
                    List<File> filesLost = (List<File>) filesOneLost[1];


                    for(File file1 : filesOne) {
                        if(filesLost.contains(file1)) {
                            filesLost.remove(file1);
                        }
                    }

                    for(File file1 : filesLost) {
                        if(filesOne.contains(file1)) {
                            filesOne.remove(file1);
                        }
                    }


                    for(File fileOne : filesOne) {
                        if(!new File(Globals.p2pFileSharesPath+"\\won_drive").exists())
                            new File(Globals.p2pFileSharesPath+"\\won_drive").mkdir();

                        System.out.println("Resource Allocation : Won File : "+fileOne.getName());                                            

                        FileInputStream fileIn = new FileInputStream(fileOne);
                        byte[] filecontent = new byte[fileIn.available()];

                        fileIn.read(filecontent);
                        fileIn.close();
                        
                        fileOne.delete();

                        FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileOne.getName()));
                        fileOut.write(filecontent);
                        fileOut.flush();
                        fileOut.close();
                    }

                    for(File fileLost : filesLost) {
                        if(!new File(Globals.p2pFileSharesPath+"\\lost_drive").exists())
                            new File(Globals.p2pFileSharesPath+"\\lost_drive").mkdir();

                        System.out.println("Resource Allocation : Lost File : "+fileLost.getName());                                            

                        FileInputStream fileIn = new FileInputStream(fileLost);
                        byte[] filecontent = new byte[fileIn.available()];

                        fileIn.read(filecontent);
                        fileIn.close();
                        
                        fileLost.delete();

                        FileOutputStream fileOut = new FileOutputStream(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileLost.getName()));
                        fileOut.write(filecontent);
                        fileOut.flush();
                        fileOut.close();
                    }

                } catch(Exception e) {

                }
                

                if(node.equals(clientId)) {
                    
                    String lastClient = "";
                    
                    if(paths.length>1) {
                        lastClient = paths[paths.length-2];
                    } else {
                        lastClient = paths[paths.length-1];
                    }
                    
                    final String lastClient1 = lastClient;
                    
                    serverThread.getClients().forEach((clientid,client)-> {
                        if(clientid.equals(lastClient1)) {
                            try {
                                PrintWriter pw = new PrintWriter(client.getOutputStream());
                                
                                String filePath = "";
                                
                                if(new File(Globals.p2pFileSharesPath+"\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\"+file).getAbsolutePath();
                                } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+file).getAbsolutePath();
                                } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+file).getAbsolutePath();
                                } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+file).exists()) {
                                    filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+file).getAbsolutePath();
                                }
                                    
                                FileInputStream fileIn = new FileInputStream(filePath);
                                byte[] fileContent = new byte[fileIn.available()];
                                
                                fileIn.read(fileContent);
                                fileIn.close();
                                
                                String hex = HexDecoder.encode(fileContent);
                                
                                pw.println("[file]:"+file+","+paths[0]+","+path);
                                pw.flush();
                                
                                int div = hex.length()/1024;
                                int divi = hex.length()%1024;
                                
                                int i=0;
                                for(i=0;i<div;i++) {
                                    String hex2 = hex.substring(i*1024,i*1024+1024);
                                    
                                    pw.println(hex2);
                                    pw.flush();
                                }
                                
                                if(divi!=0) {
                                    String hex2 = hex.substring(i*1024);
                                    
                                    pw.println(hex2);
                                    pw.flush();
                                }
                                
                                pw.println("---end of file---");
                                pw.flush();
                                
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        }
                    });
                    
                } else if(!paths[0].equals(clientId)) {
                        boolean found = false;

                        String nextClient = "";

                        for(String path1 : paths) {
                            if(found) {
                                nextClient = path1;
                                break;
                            }
                            if(path1.equals(clientId)) {
                                found = true;
                            }
                        }

                        final String lastClient1 = nextClient;
                        
                        long count = clientThreads.values().stream().filter(clientthread -> {
                           if(clientthread.getClientClientID().equals(lastClient1)) {
                               return true;
                           } else {
                               return false;
                           }
                        }).count();

                        if(count!=0) {
                            clientThreads.forEach((clientid,clientThread) -> {
                                try {
                                    if(clientThread.getClientClientID().equals(lastClient1)) {
                                        PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
                                        pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                        pw.flush();
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            });
                        } else {
                            serverThread.getClients().keySet().stream().filter(clientid-> {
                               if(clientid.equals(lastClient1)) {
                                   return true;
                               } else 
                                   return false;
                            }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                PrintWriter pw = null;
                                try {
                                    Socket client = serverThread.getClients().get(clientid);
                                    pw = new PrintWriter(client.getOutputStream());
                                    
                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                    pw.flush();
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    //pw.close();
                                }
                            });
                        }                                                

//                        clientThreads.forEach((clientid,clientThread1)-> {
//                            if(clientThread1.getClientClientID().equals(lastClient1)) {
//                                try {
//                                    
//                                    
//                                    PrintWriter pw = new PrintWriter(clientThread1.getClient().getOutputStream());
//
//                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
//                                    pw.flush();
//
//
//                                } catch (IOException ex) {
//                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
//                                }
//                            }
//
//                        });
                } else {
                        boolean found = false;

                        String nextClient = "";

                        for(String path1 : paths) {
                            if(found) {
                                nextClient = path1;
                                break;
                            }
                            
                            if(path1.equals(clientId)) {
                                found = true;
                            }
                        }

                        final String lastClient1 = nextClient;
                        
                        long count = clientThreads.values().stream().filter(clientthread -> {
                           if(clientthread.getClientClientID().equals(lastClient1)) {
                               return true;
                           } else {
                               return false;
                           }
                        }).count();

                        if(count!=0) {
                            clientThreads.forEach((clientid,clientThread) -> {
                                try {
                                    if(clientThread.getClientClientID().equals(lastClient1)) {
                                        PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
                                        pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                        pw.flush();
                                    }
                                } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                }
                            });
                        } else {
                            serverThread.getClients().keySet().stream().filter(clientid-> {
                               if(clientid.equals(lastClient1)) {
                                   return true;
                               } else 
                                   return false;
                            }).collect(Collectors.toList()).stream().forEach(clientid -> {
                                PrintWriter pw = null;
                                try {
                                    Socket client = serverThread.getClients().get(clientid);
                                    pw = new PrintWriter(client.getOutputStream());
                                    
                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                                    pw.flush();
                        } catch (IOException ex) {
                                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                } finally {
                                    //pw.close();
                                }
                            });
                        }                        
                        
//                        clientThreads.forEach((clientid,clientThread)-> {
//                            try {
//                                if(clientThread.getClientClientID().equals(lastClient1)) {
//                                    
//                                    
//                                    
//                                    PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());
//                                
//                                    pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
//                                    pw.flush();
//                                    
//                                    
//                                }
//                            } catch (IOException ex) {
//                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
//                            }
//                            
//                        });
                }
            }
            
            @Override
            public void updateRequest(String node, String path, String file) {
                if(new File(Globals.p2pFileSharesPath+"\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\replicates\\"+file).exists() || new File(Globals.p2pFileSharesPath + "\\won_drive\\"+file).exists()) {
                    final String path1 = path+(clientId+";");

                    serverThread.getClients().forEach((clientid,client) -> {
                        String[] paths = path1.split(";");

                        String lastClient = "";
                        if(paths.length>1) {
                            lastClient = paths[paths.length-2];
                        } else
                            lastClient = paths[paths.length-1];

                        if(clientid.equals(lastClient)) {
                            PrintWriter pw = null;
                            try {
                                pw = new PrintWriter(client.getOutputStream());
                                //final String path2 = path+(clientId+";");
                                pw.println("[broadcastreply]:"+node+","+file+","+path1);
                                pw.flush();
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                //pw.close();
                            }
                        }
                    });

                } else {

                    long count = clientThreads.values().stream().filter(clientthread -> {
                       if(!path.contains(clientthread.getClientClientID())) {
                           return true;
                       } else {
                           return false;
                       }
                    }).count();

                    if(count!=0) {
                        clientThreads.forEach((clientid,clientThread) -> {
                            try {
                                if(!path.contains(clientThread.getClientClientID())) {
                                    PrintWriter pw = new PrintWriter(clientThread.getClient().getOutputStream());

                                    final String path1 = path+(clientId+";");

                                    pw.println("[broadcastrequest]:"+node+","+file+","+path1);
                                    pw.flush();
                                }
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            }
                        });
                    } else {
                        serverThread.getClients().keySet().stream().filter(clientid-> {
                           if(!path.contains(clientid)) {
                               return true;
                           } else 
                               return false;
                        }).collect(Collectors.toList()).stream().forEach(clientid -> {
                            PrintWriter pw = null;
                            try {
                                Socket client = serverThread.getClients().get(clientid);
                                pw = new PrintWriter(client.getOutputStream());
                                final String path1 = path+(clientId+";");
                                pw.println("[broadcastrequest]:"+node+","+file+","+path1);
                                pw.flush();
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                //pw.close();
                            }
                        });
                    }
                }
            }
            
            @Override
            public void updateFile(String fileName, String node, String path, String hex) {


                final String hex1 = hex;

                final String[] paths = path.split(";");

                String prevClient = "";

                boolean found = false;

                for(String path1 : paths) {
                    if(path1.equals(clientId)) {
                        found = true;
                        break;
                    }

                    prevClient = path1;
                }

                if(prevClient.equals("")) {
                    found = false;

                    for(String path1 : paths) {
                        if(path1.equals(clientId)) {
                            found = true;
                        }

                        if(found) {
                            prevClient = path1;
                            break;
                        }
                    }
                }

                final String lastClient = prevClient;

                long count = clientThreads.keySet().stream().filter(clientid -> {
                    if(clientid.equals(lastClient)) {
                        return true;
                    } else
                        return false;
                }).count();

                if(count!=0) {
                    clientThreads.keySet().stream().filter(clientid-> {
                        if(clientid.equals(lastClient)) {
                            return true;
                        } else
                            return false;
                    }).forEach(clientid-> {
                        clientThreads.values().stream()
                                .filter(clientthread -> clientthread.getClientClientID().equals(clientid))
                                .forEach(clientthread -> {
                                         PrintWriter pw = null;
                                         try {
                                             pw = new PrintWriter(clientThread.getClient().getOutputStream());

                                             String hex4 = hex1;

                                             if(hex1==null) {
                                                    String filePath = "";

                                                    if(new File(Globals.p2pFileSharesPath+"\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).getAbsolutePath();
                                                    } else if(new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).exists()) {
                                                        filePath = new File(Globals.p2pFileSharesPath+"\\lost_drive\\"+fileName).getAbsolutePath();
                                                    }

                                                    FileInputStream fileIn = new FileInputStream(filePath);
                                                    byte[] fileContent = new byte[fileIn.available()];

                                                    fileIn.read(fileContent);
                                                    fileIn.close();

                                                    hex4 = HexDecoder.encode(fileContent);
                                             }

                                             pw.println("[file]:"+fileName+","+node+","+path);
                                             pw.flush();

                                             int div = hex4.length() / 1024;
                                             int divi = hex4.length() % 1024;

                                             int i=0;
                                             for(i=0;i<div;i++) {
                                                 String hex2 = hex4.substring(i*1024,i*1024+1024);

                                                 pw.println(hex2);
                                                 pw.flush();
                                             }

                                             if(divi!=0) {
                                                 String hex2 = hex4.substring(i*1024);

                                                 pw.println(hex2);
                                                 pw.flush();
                                             }

                                             pw.println("---end of file---");
                                             pw.flush();

                                         } catch (IOException ex) {
                                             Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                                         } finally {
                                             //pw.close();
                                         }
                                });
                    });
                } else {
                    serverThread.getClients().forEach((clientid,client)-> {

                        if(clientid.equals(lastClient)) {
                             PrintWriter pw = null;
                             try {
                                 pw = new PrintWriter(client.getOutputStream());

                                 String hex4 = hex1;

                                 if(hex1==null) {
                                        String filePath = "";

                                        if(new File(Globals.p2pFileSharesPath+"\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\"+fileName).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\replicates\\"+fileName).getAbsolutePath();
                                        } else if(new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).exists()) {
                                            filePath = new File(Globals.p2pFileSharesPath+"\\won_drive\\"+fileName).getAbsolutePath();
                                        }

                                        FileInputStream fileIn = new FileInputStream(filePath);
                                        byte[] fileContent = new byte[fileIn.available()];

                                        fileIn.read(fileContent);
                                        fileIn.close();

                                        hex4 = HexDecoder.encode(fileContent);
                                 }

                                 pw.println("[file]:"+fileName+","+node+","+path);
                                 pw.flush();

                                 int div = hex4.length() / 1024;
                                 int divi = hex4.length() % 1024;

                                 int i=0;
                                 for(i=0;i<div;i++) {
                                     String hex2 = hex4.substring(i*1024,i*1024+1024);

                                     pw.println(hex2);
                                     pw.flush();
                                 }

                                 if(divi!=0) {
                                     String hex2 = hex4.substring(i*1024);

                                     pw.println(hex2);
                                     pw.flush();
                                 }

                                 pw.println("---end of file---");
                                 pw.flush();

                             } catch (IOException ex) {
                                 Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                             } finally {
                                 //pw.close();
                             }
                        }

                    });
                }
            }            
            
            public void getFile(String node,String clientId, String path, String file) {

                final String[] paths = path.split(";");

                boolean found = false;

                String nextClient = "";

                for(String path1 : paths) {
                    if(found) {
                        nextClient = path1;
                        break;
                    }
                    
                    if(path1.equals(clientId)) {
                        found = true;
                    }
                }

                final String nextClient1 = nextClient;

                clientThreads.forEach((clientid,clientThread1)-> {
                    if(clientThread1.getClientClientID().equals(nextClient1)) {
                        PrintWriter pw = null;
                        try {
                            pw = new PrintWriter(clientThread1.getClient().getOutputStream());
                            pw.println("[getfile]:"+paths[paths.length-1]+","+file+","+path);
                            pw.flush();
                        } catch (IOException ex) {
                            Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                        } finally {
                            //pw.close();
                        }
                    } 
                });
            }
            
            private int minCount = 0;
            private String selectedPath = "";

            @Override
            public void updateReply(String node, String file, String path) {

                pathreplies.add(path);
                
                minCount = Integer.MAX_VALUE;
                
                replyCount++;

                if(pathreplies.size()==Globals.broadcastRequestCount) {
                    pathreplies.stream().forEach(path1->{
                        String[] split = path1.split(";");

                        if(split.length<minCount) {
                            minCount = split.length;
                            selectedPath = path1;
                        }
                    });


                    path = selectedPath;

                    pathreplies.clear();
                } 


                final String path_selected = path;
                
                String[] paths = path.split(";");
                            
                if(paths[0].equals(clientId)) {
                    getFile(node,clientId,path,file);
                } else {
                    String lastClient = paths[0];
                    
                    for(String path1 : paths) {
                        if(path1.equals(clientId)) {
                            break;
                        }
                        lastClient = path1;
                    }
                    
                    final String lastClient1 = lastClient;
                    
                    serverThread.getClients().forEach((clientid,client)-> {
                        if(clientid.equals(lastClient1)) {
                            PrintWriter pw = null;
                            try {
                                pw = new PrintWriter(client.getOutputStream());
                                //final String path2 = path+(clientId+";");
                                pw.println("[broadcastreply]:"+node+","+file+","+path_selected);
                                pw.flush();
                            } catch (IOException ex) {
                                Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                            } finally {
                                //pw.close();
                            }
                        }
                    });
                }
            }

            @Override
            public void updateFile(String fileName, byte[] fileContent) {
                try {
                    if(!new File(Globals.p2pFileSharesPath+"\\replicates").exists())
                        new File(Globals.p2pFileSharesPath+"\\replicates").mkdir();
                    
                    FileOutputStream fileOut = new FileOutputStream(Globals.p2pFileSharesPath+"\\replicates\\"+fileName);
                    
                    try {
                        fileOut.write(fileContent);
                    } catch (IOException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        fileOut.flush();
                    } catch (IOException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    try {
                        fileOut.close();
                    } catch (IOException ex) {
                        Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                } catch (FileNotFoundException ex) {
                    Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(Level.SEVERE, null, ex);
                }
            }

            @Override
            public void updateFiles(List<String> files) {
                filesList = files;
            }

            @Override
            public void updateNodes(List<String> files) {
                nodesList = files;
            }
            
            
        });
        
        clientThread.start();

        this.clientThreads.put(clientThread.getClientClientID(), clientThread);
        
    }//GEN-LAST:event_jMenuItemConnectToClientActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MaximizingP2PFileSharingClientMain.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MaximizingP2PFileSharingClientMain().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDesktopPane desktopPane;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JMenu fileMenu;
    private javax.swing.JInternalFrame jInternalFrameConsole;
    private javax.swing.JLabel jLabelNodeName;
    private javax.swing.JMenuItem jMenuItemConnectToClient;
    private javax.swing.JMenuItem jMenuItemRequestReplicate;
    private javax.swing.JMenuItem jMenuItemStartClient;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextAreaConsole;
    private javax.swing.JMenuBar menuBar;
    // End of variables declaration//GEN-END:variables

}
